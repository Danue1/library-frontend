image: python:3.6

stages:
  - build
  - manual-deploy
  - deploy-development
  - deploy-staging
  - deploy-productiuon

.aws-docker: &aws-docker
  image: ridibooks/gitlab-ci-docker-aws:latest

.build-template: &build
  <<: *aws-docker
  stage: build
  only:
    - master
  before_script:
    - apk add nodejs yarn python3
    - pip install pipenv
    - make python-package-install
    - export TAG=${CI_COMMIT_SHA::8}

  script:
    - make ci-settings ns=$ENVIRONMENT
    - sh docs/script/export.sh
    - sh docs/script/upload.sh
    - docker-compose -f ./docs/docker/compose/build.yml build

build-development:
  <<: *build
  variables:
    ENVIRONMENT: 'development'
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY

build-staging:
  <<: *build
  variables:
    ENVIRONMENT: 'staging'
    AWS_ACCESS_KEY_ID: $STAGING_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $STAGING_AWS_SECRET_ACCESS_KEY

build-production:
  <<: *build
  variables:
    ENVIRONMENT: 'production'
    AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY

.deployment-template: &deployment
  <<: *aws-docker
  only:
    - master
  before_script:
    - export TAG=${CI_COMMIT_SHA::8}
    - '`aws ecr get-login --no-include-email --region=$AWS_DEFAULT_REGION`'
  script:
    - sh docs/script/push.sh
    - sh docs/script/deploy.sh

development:
  <<: *deployment
  stage: deploy-development
  variables:
    ENVIRONMENT: 'development'
    ECR_REPO_URL: $DEV_LIBRARY_ECR
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY

staging:
  <<: *aws-docker
  stage: deploy-staging
  when: manual
  only:
    - master
  variables:
    ENVIRONMENT: 'staging'
    ECR_REPO_URL: $STAGING_LIBRARY_ECR
    AWS_ACCESS_KEY_ID: $STAGING_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $STAGING_AWS_SECRET_ACCESS_KEY
  script:
    - sh docs/script/push.sh
    - sh docs/script/staging_deploy.sh

production:
  <<: *deployment
  stage: deploy-production
  when: manual
  variables:
    ENVIRONMENT: 'production'
    ECR_REPO_URL: $PROD_LIBRARY_ECR
    AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY

.manual-deployment-template: &manual-deployment
  <<: *aws-docker
  stage: manual-deploy
  when: manual
  except:
    - master
  before_script:
    - apk add nodejs yarn python3
    - pip install pipenv
    - make python-package-install
    - export TAG=${CI_COMMIT_SHA::8}
    - '`aws ecr get-login --no-include-email --region=$AWS_DEFAULT_REGION`'
  script:
    - make ci-settings ns=$ENVIRONMENT
    - sh docs/script/export.sh
    - sh docs/script/upload.sh
    - docker-compose -f ./docs/docker/compose/build.yml build

    - sh docs/script/push.sh
    - sh docs/script/deploy.sh

development-manual:
  <<: *manual-deployment
  variables:
    ENVIRONMENT: 'development'
    DOMAIN: $DEV_DOMAIN
    ECR_REPO_URL: $DEV_LIBRARY_ECR
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY

staging-manual:
  <<: *manual-deployment
  variables:
    ENVIRONMENT: 'staging'
    ECR_REPO_URL: $STAGING_LIBRARY_ECR
    AWS_ACCESS_KEY_ID: $STAGING_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $STAGING_AWS_SECRET_ACCESS_KEY
